# zsh_functions: user-defined functions for zsh
up() {
    if [ $# -eq 0 ]; then
        cd ..
    elif [ $# -eq 1 ]; then
        # Figure out how many directories up we're moving
        DIRECTORY=""
        for ((i=0; i<$1; i++)); do
            DIRECTORY="../${DIRECTORY}"
        done

        # Execute the directory change
        if [ -n "$DIRECTORY" ]; then
            cd "$DIRECTORY"
        fi
    fi
}

git_current_status() {
    # Use the first line of git status
    git_status=$(git status --long 2> /dev/null | head -n 1 | sed 's/On branch //g')
    if [ -z "$git_status" ]; then
        echo ""
    else
        echo "$git_status "
    fi
}

virtualenv_status() {
    if [ -z "$VIRTUAL_ENV" ]; then
        echo ""
    else
        echo "$(basename $VIRTUAL_ENV) "
    fi
}

magic() {
    if [ -d "$HOME/incantations" ]; then
        export PATH="$HOME/incantations:$PATH"
        echo "Magic spells available:"
        ls "$HOME/incantations"
    fi
}

goto() {
    if [ $# -gt 1 ]; then
        echo "$0: error: expected only one argument"
    elif [ $# -eq 1 ]; then
        case $1 in
            cfg|config)
                cd "$HOME/programming/config-files" ;;
            d|docs)
                cd "$HOME/programming/docs" ;;
            e|enterprise)
                cd "$HOME/programming/enterprise-modules" ;;
            m|mongo)
                cd "$HOME/programming/mongo" ;;
            mmap|mmapv1)
                cd "$HOME/programming/mongo/src/mongo/db/storage/mmap_v1" ;;
            p|prog|programming)
                cd "$HOME/programming" ;;
            src)
                cd "$HOME/programming/mongo/src/mongo" ;;
            storage)
                cd "$HOME/programming/mongo/src/mongo/db/storage" ;;
            wt|wiredtiger|wiredTiger)
                cd "$HOME/programming/mongo/src/mongo/db/storage/wiredtiger" ;;
            *)
                echo "Undefined label." ;;
        esac
    fi
}

please() {
    # Get the last command run and strip the history number plus whitespace
    CMD=$(fc -l -1 | awk '{$1=""; print $0}' | sed -e 's/^[ ]*//')
    echo "sudo $CMD"
    eval "sudo $CMD"
}

man() {
    env \
	LESS_TERMCAP_mb=$(printf "\x1b[38;2;255;200;200m") \
	LESS_TERMCAP_md=$(printf "\x1b[38;2;255;100;200m") \
	LESS_TERMCAP_me=$(printf "\x1b[0m") \
	LESS_TERMCAP_so=$(printf "\x1b[38;2;60;90;90;48;2;40;40;40m") \
	LESS_TERMCAP_se=$(printf "\x1b[0m") \
	LESS_TERMCAP_us=$(printf "\x1b[38;2;150;100;200m") \
	LESS_TERMCAP_ue=$(printf "\x1b[0m") \
	man "$@"
}

#" vim: filetype=sh
